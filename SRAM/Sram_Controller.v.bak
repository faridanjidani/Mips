module Sram_Controller (
	input clk,
	input rst,
	// From memory stage
	input wr_en,
	input rd_en,
	input [31:0] address,
	input [31:0] Write_Data,
	// to next stage
	output [31:0 ] Read_Data,
	// for freeze other stage
	output ready,

	inout  [15:0 ] SRAM_DQ,
	output [17:0] SRAM_ADDR,
	output SRAM_UB_N,
	output SRAM_LB_N,
	output SRAM_WE_N,
	output SRAM_CE_N,
	output SRAM_OE_N
);
	assign SRAM_CE_N = 1'b0;
	assign SRAM_LB_N = 1'b0;
	assign SRAM_UB_N = 1'b0;
	assign SRAM_OE_N =1'b0;

	reg [1:0]cnt;

	assign SRAM_WE_N =  wr_en? 1'b1 : rd_en ? 1'b0 : 1'bz ;
	always @(posedge clk or posedge rst) begin
		if (rst) begin
			// reset
			ready <=1'b1;
			cnt <= 2'b0;
			SRAM_ADDR <= 18'b0;
		end

		else  begin
			ready <=1'b1;
			if( rd_en)begin
				ready <=1'b0;
				cnt <=cnt + 1'b1;
				SRAM_ADDR <= address [17:0];

				if(cnt == 2'b01) begin
					SRAM_ADDR <= address [17:0] + 18'b000000000000000001;
					Read_Data[15:0] <= SRAM_DQ;
				end
				if(cnt == 2'b10)begin
					Read_Data[31:16] <= SRAM_DQ;
					ready <=1'b1;
				end

			end
			
			if(wr_en)begin
				ready <=1'b0;
				cnt <=cnt + 1'b1;
				SRAM_ADDR <= address [17:0];
				SRAM_DQ <= Write_Data[15:0];
				if(cnt == 2'b01) begin
					SRAM_ADDR <= address [17:0]  + 18'b000000000000000001;
					SRAM_DQ <= Write_Data[31:16];
					ready<=1'b1;
				end

			end

		end
	end

endmodule

